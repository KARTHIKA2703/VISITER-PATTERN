[11:01 PM, 9/5/2024] Kuttachii ♥️: The Visitor Pattern in Java is a behavioral design pattern used to separate algorithms from the objects on which they operate. It is particularly beneficial when there is a stable object structure but varying behaviors that need to be added or changed frequently without altering the object classes themselves. This is achieved by having the new behavior implemented in a separate visitor class.

Key Concepts:
Visitor: This is an interface or abstract class that declares a set of visit methods, one for each type of object in the structure. Each visit method contains the logic that applies to the respective object type.

Concrete Visitor: Implements the visitor interface and provides the specific operations for each object type. It allows a new behavior to be applied to objects of different types without changing their classes.

Element: Represents the interface that defines the accept() method. This method takes a visitor as a parameter and allows the visitor to perform the required operation on the element.

Concrete Element: These are the actual objects in the system that implement the Element interface and represent different types of objects that the visitor will act upon. Each element class implements the accept() method to call the corresponding visit method on the visitor.

Object Structure: This refers to a collection or hierarchy of elements that the visitor traverses. It could be an object tree or a list of different element types, allowing the visitor to operate on each element.

Benefits:
Single Responsibility Principle: The pattern allows you to place different behaviors in separate classes, following this principle.
Open/Closed Principle: New operations can be added by creating new visitor classes without modifying the existing element classes.
Flexibility: You can define new behaviors for existing classes without altering their source code.
Limitations:
Complexity: If the object structure frequently changes, the visitor pattern can become cumbersome, as each new element requires changes in every visitor class.
Violation of Encapsulation: The pattern might expose details of the element classes that wouldn’t be necessary otherwise.
[11:02 PM, 9/5/2024] Kuttachii ♥️: import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.util.ArrayList;
import java.util.Scanner;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
}

class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}

abstract class TreeVis
{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}

class SumInLeavesVisitor extends TreeVis {
    int sumInLeaves = 0;
    public int getResult() {
        return sumInLeaves;
    }
    public void visitNode(TreeNode node) {
        // empty return
    }
    public void visitLeaf(TreeLeaf leaf) {
        sumInLeaves += leaf.getValue();
    }
}
class ProductOfRedNodesVisitor extends TreeVis {
    long productOfRedNodes = 1L;
    public int getResult() {
        return (int) (productOfRedNodes);
    }
    void multiply(Tree tree) {
        if (tree.getColor() == Color.RED)
            productOfRedNodes = (productOfRedNodes * tree.getValue()) % (1000000007);
    }
    public void visitNode(TreeNode node) {
        multiply(node);
    }
    public void visitLeaf(TreeLeaf leaf) {
        multiply(leaf);
    }
}
class FancyVisitor extends TreeVis {
    int sumOfValuesNonLeafEvenDepth = 0;
    int sumOfValuesGreenLeaf = 0;
    public int getResult() {
        return Math.abs(sumOfValuesGreenLeaf - sumOfValuesNonLeafEvenDepth);
    }
    public void visitNode(TreeNode node) {
        if (node.getDepth() % 2 != 0) return;
        sumOfValuesNonLeafEvenDepth += node.getValue();
    }
    public void visitLeaf(TreeLeaf leaf) {
        if (leaf.getColor() != Color.GREEN) return;
        sumOfValuesGreenLeaf += leaf.getValue();
    }
}
public class Solution {
    static Map<Integer, Tree> tree = new HashMap<>();
    public static Tree solve() {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Map<Integer, Object[]> nodeAtts = new HashMap<Integer, Object[]>();
        for (int i = 0; i < n; i++)
            nodeAtts.put(i + 1, new Object[]{sc.nextInt(), null});
        for (int i = 0; i < n; i++)
            nodeAtts.get(i + 1)[1] = sc.nextInt() == 0 ? Color.RED : Color.GREEN;
        Map<Integer, ArrayList<Integer>> edges = new HashMap<Integer, ArrayList<Integer>>();
        for (int i = 1; i <= n; i++)
            edges.put(i, new ArrayList<Integer>());
        for (int i = 1; i < n; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            edges.get(u).add(v);
            edges.get(v).add(u);
        }
        Tree root = new TreeNode((Integer) nodeAtts.get(1)[0], (Color) nodeAtts.get(1)[1], 0);
        tree.put(1, root);
        DFS(n, edges, nodeAtts);
        return tree.get(1);
    }
    private static void DFS(int n, Map<Integer, ArrayList<Integer>> edges, Map<Integer, Object[]> nodeAtts) {
        boolean[] visited = new boolean[n + 1];
        TreeNode parent = (TreeNode) tree.get(1);
        DFSUtil(parent, 1, visited, edges, nodeAtts);
    }
    private static void DFSUtil(TreeNode parent, int v, boolean[] visited, Map<Integer, ArrayList<Integer>> edges, Map<Integer, Object[]> nodeAtts) {
        visited[v] = true;
        if (edges.get(v).size() == 1 && v != 1) {
            TreeLeaf treeLeaf = new TreeLeaf((Integer) nodeAtts.get(v)[0], (Color) nodeAtts.get(v)[1], parent.getDepth() + 1);
            parent.addChild(treeLeaf);
            tree.put(v, treeLeaf);
            return;
        }
        TreeNode treeNode;
        if (v != 1) {
            treeNode = new TreeNode((Integer) nodeAtts.get(v)[0], (Color) nodeAtts.get(v)[1], parent.getDepth() + 1);
            parent.addChild(treeNode);
            tree.put(v, treeNode);
        } else
            treeNode = (TreeNode) tree.get(1);
        Iterator<Integer> iterator = edges.get(v).iterator();
        while (iterator.hasNext()) {
            int n = iterator.next();
            if (!visited[n]) {
                DFSUtil(treeNode, n, visited, edges, nodeAtts);
            }
        }
    }
